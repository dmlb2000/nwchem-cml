From 35ee6444498d718fbf862cdcb1d323c6ee74f5f2 Mon Sep 17 00:00:00 2001
From: Andrew Walker <andrew.walker@bristol.ac.uk>
Date: Tue, 24 Apr 2012 16:47:06 +0100
Subject: [PATCH] wxml/wcml: Add fx%extended_data and use for wcml

In order to implement validity constraints imposed by the
CML schema without breaking applications that already use
FoX_wcml we need a way to allow FoX_wcml to change behaviour
depending on how it is used. This ability could be useful
for other 'writer' modules.

In FoX_wcml add an optional logical input argument to
cmlStartCml which (1) adds a (currently arbirary) extra
namespace and (2) uses this namespace to put prefixes
on the UUID metadata and CMLComp convention. In future
this could also turn on some limited run-time valididity
checking.

In order to keep track of if this is on or off add a
new integer member to the xmlf_t. This is 0 by default
and by stuffing some other number in it the useing
module is expected to change its own behaviour. This
member is accessed by a new function xmlf_GetExtendedData
(which takes a single xmlf_t argument and returns an integer)
and set by a new subroutine, xmlf_SetExtendedData (which takes
two arguments, the xmlf_t type and and integer value to set).

Finally, add a test to show that this actually does something.
---
 wcml/m_wcml_core.F90             |   18 ++++++++++++++++--
 wcml/test/test_cmlStartCml_4.f90 |   13 +++++++++++++
 wcml/test/test_cmlStartCml_4.xml |    3 +++
 wxml/FoX_wxml.f90                |    2 ++
 wxml/m_wxml_core.F90             |   29 +++++++++++++++++++++++++++++
 5 files changed, 63 insertions(+), 2 deletions(-)
 create mode 100644 wcml/test/test_cmlStartCml_4.f90
 create mode 100644 wcml/test/test_cmlStartCml_4.xml

diff --git a/wcml/m_wcml_core.F90 b/wcml/m_wcml_core.F90
index d65d006..53b7d44 100644
--- a/wcml/m_wcml_core.F90
+++ b/wcml/m_wcml_core.F90
@@ -11,6 +11,7 @@ module m_wcml_core
   use FoX_wxml, only: xml_NewElement, xml_AddAttribute
   use FoX_wxml, only: xml_EndElement, xml_DeclareNamespace
   use FoX_wxml, only: xmlf_Name, xmlf_OpenTag
+  use FoX_wxml, only: xmlf_GetExtendedData, xmlf_SetExtendedData
 
   use m_wcml_metadata, only: cmlAddMetadata
 #endif
@@ -69,7 +70,7 @@ contains
   end subroutine cmlAddNamespace
 
 
-  subroutine cmlStartCml(xf, id, title, convention, dictref, fileId, version)
+  subroutine cmlStartCml(xf, id, title, convention, dictref, fileId, version, validate)
     type(xmlf_t), intent(inout) :: xf
     character(len=*), intent(in), optional :: id
     character(len=*), intent(in), optional :: title
@@ -77,6 +78,7 @@ contains
     character(len=*), intent(in), optional :: dictref
     character(len=*), intent(in), optional :: fileId
     character(len=*), intent(in), optional :: version
+    logical, intent(in), optional          :: validate
 
 #ifndef DUMMYLIB
     call xml_DeclareNamespace(xf, 'http://www.xml-cml.org/schema')
@@ -87,6 +89,12 @@ contains
     call xml_DeclareNamespace(xf, 'http://www.xml-cml.org/units/units', 'cmlUnits')
     call xml_DeclareNamespace(xf, 'http://www.xml-cml.org/units/siUnits', 'siUnits')
     call xml_DeclareNamespace(xf, 'http://www.xml-cml.org/units/atomic', 'atomicUnits')
+    if (present(validate)) then
+      if (validate) then
+        call xmlf_SetExtendedData(xf, 20)
+        call xml_DeclareNamespace(xf, 'http://www1.gly.bris.ac.uk/~walker/namespaces/foxmisc', 'fmisc')
+      endif
+    endif
 ! FIXME TOHW we may want other namespaces in here - particularly for units
 ! once PMR has stabilized that.
 
@@ -96,6 +104,8 @@ contains
     if (present(dictref)) call xml_AddAttribute(xf, 'dictRef', dictref)
     if (present(convention)) then
       call xml_AddAttribute(xf, 'convention', convention)
+    elseif (xmlf_GetExtendedData(xf).eq.20) then
+      call xml_AddAttribute(xf, 'convention', 'fmisc:CMLComp')
     else
       call xml_AddAttribute(xf, 'convention', 'CMLComp')
     endif
@@ -108,7 +118,11 @@ contains
       call xml_AddAttribute(xf, 'version', version)
     endif
 
-    call cmlAddMetadata(xf, name='UUID', content=generate_uuid(1))
+    if (xmlf_GetExtendedData(xf).eq.20) then
+      call cmlAddMetadata(xf, name='fmisc:UUID', content=generate_uuid(1))
+    else
+      call cmlAddMetadata(xf, name='UUID', content=generate_uuid(1))
+    endif
 #endif
 
   end subroutine cmlStartCml
diff --git a/wcml/test/test_cmlStartCml_4.f90 b/wcml/test/test_cmlStartCml_4.f90
new file mode 100644
index 0000000..f3d1655
--- /dev/null
+++ b/wcml/test/test_cmlStartCml_4.f90
@@ -0,0 +1,13 @@
+program test
+
+  use FoX_wcml
+  implicit none
+
+  character(len=*), parameter :: filename = 'test.xml'
+  type(xmlf_t) :: xf
+
+  call cmlBeginFile(xf, filename, unit=-1)
+  call cmlStartCml(xf, validate=.true.)
+  call cmlFinishFile(xf)
+
+end program test
diff --git a/wcml/test/test_cmlStartCml_4.xml b/wcml/test/test_cmlStartCml_4.xml
new file mode 100644
index 0000000..4005d55
--- /dev/null
+++ b/wcml/test/test_cmlStartCml_4.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<cml convention="fmisc:CMLComp" fileId="test.xml" xmlns="http://www.xml-cml.org/schema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:fpx="http://www.uszla.me.uk/fpx" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:units="http://www.uszla.me.uk/FoX/units" xmlns:cmlUnits="http://www.xml-cml.org/units/units" xmlns:siUnits="http://www.xml-cml.org/units/siUnits" xmlns:atomicUnits="http://www.xml-cml.org/units/atomic" xmlns:fmisc="http://www1.gly.bris.ac.uk/~walker/namespaces/foxmisc">
+</cml>
diff --git a/wxml/FoX_wxml.f90 b/wxml/FoX_wxml.f90
index 41c1e56..cf4def0 100644
--- a/wxml/FoX_wxml.f90
+++ b/wxml/FoX_wxml.f90
@@ -36,6 +36,8 @@ module FoX_wxml
 
   public :: xmlf_GetPretty_print
   public :: xmlf_SetPretty_print
+  public :: xmlf_GetExtendedData
+  public :: xmlf_SetExtendedData
 
   public :: xmlf_Name
   public :: xmlf_OpenTag
diff --git a/wxml/m_wxml_core.F90 b/wxml/m_wxml_core.F90
index 2afd30b..7e905c2 100644
--- a/wxml/m_wxml_core.F90
+++ b/wxml/m_wxml_core.F90
@@ -87,6 +87,9 @@ module m_wxml_core
     integer                   :: state_1 = -1
     integer                   :: state_2 = -1
     integer                   :: state_3 = -1
+    ! Holder for extra information for other writers. See
+    ! table with getter and setter below:
+    integer                   :: extended_data = 0
     logical                   :: minimize_overrun = .true.
     logical                   :: pretty_print = .false.
     logical                   :: canonical = .false.
@@ -128,6 +131,8 @@ module m_wxml_core
 
   public :: xmlf_SetPretty_print
   public :: xmlf_GetPretty_print
+  public :: xmlf_SetExtendedData
+  public :: xmlf_GetExtendedData
 
   interface xml_AddCharacters
     module procedure xml_AddCharacters_Ch
@@ -1653,6 +1658,30 @@ contains
 #endif
   end function xmlf_GetPretty_print
 
+! xf%extended data is an integer so that writers
+! can change there behaviour depending on some 
+! stored information. Currently only used for 
+! wcml 'validate' argument (which is intended to 
+! check some of the more troublesome aspects of
+! the CML schema
+  subroutine xmlf_SetExtendedData(xf, new_value)
+    type(xmlf_t), intent(inout) :: xf
+    integer, intent(in)         :: new_value
+#ifndef DUMMYLIB
+    xf%extended_data = new_value
+#endif
+  end subroutine xmlf_SetExtendedData
+
+  pure function xmlf_GetExtendedData(xf) result(value)
+    integer :: value
+    type(xmlf_t), intent(in) :: xf
+#ifdef DUMMYLIB
+    value = .false.
+#else
+    value = xf%extended_data
+#endif
+  end function xmlf_GetExtendedData
+
   pure function xmlf_name(xf) result(fn)
     type (xmlf_t), intent(in) :: xf
 #ifdef DUMMYLIB
-- 
1.6.6.1

